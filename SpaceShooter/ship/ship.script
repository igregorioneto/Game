function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	-- Tamanho e largura da tela
	self.screen_height = 640
	self.screen_width = 960
	print(self.screen_height, self.screen_width)

	-- Informando para começar a escutar os inputs
	msg.post('.', 'acquire_input_focus')

	-- declarando variáveis
	self.direction = vmath.vector3()
	self.ship_half_width = go.get("#ship", "size.x") / 2
	self.ship_half_height = go.get("#ship", "size.y") / 2	

	self.speed = 10
	self.screen_top = 0 + self.ship_half_height;
	self.screen_bottom = self.screen_height - self.ship_half_height;
	self.screen_left = 0 + self.ship_half_width;
	self.screen_right = self.screen_width - self.ship_half_width;
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	movimentacao_nave(self, dt)
	
end

function movimentacao_nave(self, dt)
	-- Alterando a movimentação da nave
	local current_position = go.get_position()
	local new_position = current_position + self.direction * self.speed

	if self.direction ~= vmath.vector3() then
		-- Verifica a posição da nave com o tamanho da tela
		-- Modificando os sprites da nave
		if self.direction.x < 0 then
			if new_position.x < self.screen_left then
				new_position.x = self.screen_left
			end
			msg.post('#ship', 'play_animation', { id = hash('fight_left') })
		elseif self.direction.x > 0 then
			if new_position.x > self.screen_right then
				new_position.x = self.screen_right
			end
			msg.post('#ship', 'play_animation', { id = hash('fight_right') })
		else
			msg.post('#ship', 'play_animation', { id = hash('indle') })
		end
		
		if new_position.y > self.screen_bottom then
			new_position.y = self.screen_bottom
		end
		if new_position.y < self.screen_top then
			new_position.y = self.screen_top
		end
		-- Setando a posição atual
		go.set_position(new_position)

		self.direction = vmath.vector3()
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed

	-- Setando inputs da nave
	inputs_nave(self, action_id, action)
	
end

function inputs_nave(self, action_id, action)
	-- Setando inputs da nave
	if action_id == hash("move_up") then
		self.direction.y = 1
	elseif action_id == hash("move_down") then
		self.direction.y = -1
	end

	if action_id == hash("move_left") then
		self.direction.x = -1
	elseif action_id == hash("move_right") then
		self.direction.x = 1
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
